{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","mute","play","display","value","handlesound","x","setState","console","log","handleChange","event","newValue","Fragment","url","volume","this","playStatus","Sound","status","PLAYING","PAUSED","STOPPED","Typography","id","gutterBottom","Grid","container","spacing","item","xs","Slider","onChange","aria-labelledby","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6VAuFeA,E,2MA7EbC,MAAQ,CACNC,MAAM,EACNC,MAAM,EACNC,QAAS,EACTC,MAAO,I,EAWTC,YAAc,SAAAC,GACZ,EAAKC,SAAS,CAAEH,MAAOE,IACvBE,QAAQC,IAAIH,I,EAGdI,aAAe,SAACC,EAAOC,GACrBJ,QAAQC,IAAI,EAAKT,MAAMI,OACvB,EAAKG,SAAS,CAAEH,MAAOQ,K,wEAEf,IAAD,OACP,OACE,kBAAC,IAAMC,SAAP,KAEE,kBAAC,IAAD,CACEC,IAAI,yBACJC,OAAQC,KAAKhB,MAAMI,MACnBa,WACyB,IAAvBD,KAAKhB,MAAMG,QACPe,IAAMC,OAAOC,QACU,IAAvBJ,KAAKhB,MAAMG,QACXe,IAAMC,OAAOE,OACbH,IAAMC,OAAOG,UAIrB,kBAACC,EAAA,EAAD,CAAYC,GAAG,oBAAoBC,cAAY,GAA/C,UAGA,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACvB,kBAACF,EAAA,EAAD,CAAMG,MAAI,GACR,kBAAC,IAAD,OAEF,kBAACH,EAAA,EAAD,CAAMG,MAAI,EAACC,IAAE,GACX,kBAACC,EAAA,EAAD,CACE3B,MAAOY,KAAKhB,MAAMI,MAClB4B,SAAUhB,KAAKN,aACfuB,kBAAgB,uBAGpB,kBAACP,EAAA,EAAD,CAAMG,MAAI,GACR,kBAAC,IAAD,QAcJ,4BAAQK,QAAS,kBAAM,EAAK7B,YAAY,KAAxC,QACA,4BAAQ6B,QAAS,kBAAM,EAAK7B,YAAY,KAAxC,SACA,4BAAQ6B,QAAS,kBAAM,EAAK7B,YAAY,KAAxC,a,GAxEU8B,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ff1128f1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Sound from \"react-sound\";\nimport Slider from \"@material-ui/core/Slider\";\nimport VolumeDown from \"@material-ui/icons/VolumeDown\";\nimport VolumeUp from \"@material-ui/icons/VolumeUp\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\n\nclass App extends Component {\n  state = {\n    mute: false,\n    play: true,\n    display: 0,\n    value: 50\n  };\n\n  // handleMute = () => {\n  //   console.log(this.state.mute);\n  //   this.setState({ mute: !this.state.mute });\n  // };\n  // handlePlay = () => {\n  //   console.log(this.state.play);\n  //   this.setState({ play: !this.state.play });\n  // };\n  handlesound = x => {\n    this.setState({ value: x });\n    console.log(x);\n  };\n\n  handleChange = (event, newValue) => {\n    console.log(this.state.value);\n    this.setState({ value: newValue });\n  };\n  render() {\n    return (\n      <React.Fragment>\n        {/* <ReactAudioPlayer src=\"./beats/stolenbeat.mp3\"  autoPlay /> */}\n        <Sound\n          url=\"./beats/stolenbeat.mp3\"\n          volume={this.state.value}\n          playStatus={\n            this.state.display === 0\n              ? Sound.status.PLAYING\n              : this.state.display === 1\n              ? Sound.status.PAUSED\n              : Sound.status.STOPPED\n          }\n        />\n\n        <Typography id=\"continuous-slider\" gutterBottom>\n          Volume\n        </Typography>\n        <Grid container spacing={2}>\n          <Grid item>\n            <VolumeDown />\n          </Grid>\n          <Grid item xs>\n            <Slider\n              value={this.state.value}\n              onChange={this.handleChange}\n              aria-labelledby=\"continuous-slider\"\n            />\n          </Grid>\n          <Grid item>\n            <VolumeUp />\n          </Grid>\n        </Grid>\n        {/* <Slider\n          disabled\n          defaultValue={30}\n          aria-labelledby=\"continuous-slider\"\n        />\n\n        <Slider\n          disabled\n          defaultValue={30}\n          aria-labelledby=\"continuous-slider\"\n        /> */}\n        <button onClick={() => this.handlesound(0)}>play</button>\n        <button onClick={() => this.handlesound(1)}>pause</button>\n        <button onClick={() => this.handlesound(2)}>stop</button>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}